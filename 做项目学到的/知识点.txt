
1.
<ScrollView
        android:id="@+id/user_details_scrollview2"
        android:layout_width="match_parent"
        android:layout_height="fill_parent"
        android:layout_alignParentTop="true"
        android:layout_marginTop="50dp"
        android:visibility="gone"
        android:layout_above="@+id/user_details_ll_bottom2"
        android:layout_below="@+id/single_fragment_rl_top2">

自己之前把在线性布局里面的ScrollView复制放到相对布局里面没有写android:layout_above="@+id/user_details_ll_bottom2"
                                                              android:layout_below="@+id/single_fragment_rl_top2">
ScrollView在布局中间显示，底部一直不能滑动出来被遮挡（特别烦恼）  原因：

android:layout_above这是在相对布局里面才有的属性，  1 2 3 排列。2在1的下面，在3的上面。滑动时候才不会被挡住。如果不写这个滑动的时候就会被遮挡。

2.<View
        android:id="@+id/single_fragment_view_12"
        android:layout_width="match_parent"
        android:background="@color/b2"
        android:layout_height="1px"
        android:layout_below="@+id/single_fragment_rl_top2"/>
自己在写这个线的时候之前一直显示不出来，后面才发现控件都把空间占完了，把线挡住了，所以就不能显示出来，所以下次一定要记得把那个线1dp的空间
留出来。

3.
你看哪空指针了.对象.方法,空指针就是这个对象为null,然后找viewpager就好了（自己viewpager引用错误）
查错方法

4.http://blog.sina.com.cn/s/blog_54516e970100bi6m.html  Replace用法


6.Android之使用个推实现三方应用的推送功能  http://www.cnblogs.com/RGogoing/p/5773544.html
  这个是之前的写法，和自己工程里面代码一样。

7.获取相册图片及路径  http://blog.csdn.net/hugh114/article/details/5765332

8.转义字符：
           HTML的&lt; &gt;&amp;&quot;&copy;分别是<，>，&，"，@;的转义字符
           XML只有5个转义符: &lt; &gt;&amp; &quot; &apos;

9. String telRegex = "[1][34578]\\d{9}";

10.<string name="weixin_delivery">微信支付</String>  一直错不能引用，后面才发现</String>首字母大写了应该为</string>

11.在工程里面有一个BuildConfig类，这个类是自动生成的，无法进行修改，其实这个类里面的属性的生成是根据APP目录下build.gradle文件生成的。

12.报错：android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@2c5025b1 is not valid
  http://www.cnblogs.com/gzgg/archive/2011/10/19/2217817.html 
  http://blog.csdn.net/huangbiao86/article/details/7791786

13.控制自定义Dialog的大小和位置 http://blog.csdn.net/misly_vinky/article/details/19109517

14.android onSaveInstanceState方法   http://blog.sina.com.cn/s/blog_618199e60101g1k5.html

15.Android 记住密码和自动登录界面的实现（SharedPreferences 的用法）  http://blog.csdn.net/liuyiming_/article/details/7704923/
   android学习――SharedPreferences类的的使用方法 http://blog.csdn.net/janronehoo/article/details/6985849

 常见的一些设置：


16.Android Dialog用法  http://www.cnblogs.com/weeds/archive/2012/01/17/2324238.html
    Dialog类介绍       http://www.cnblogs.com/xirihanlin/archive/2009/08/03/1537791.html

17.tvDialog.setTextColor(mContext.getResources().getColor(R.color.white));
   当设置颜色传入的参数为int值的时候，需要这样来解决，将八进制数转化成一个int值
1.
  setFinishOnTouchOutside(false); 就可以设置点击对话框外部是否消失，但API11之前没有这个方法，也就是说API11之前没有现成的方法能够实现点击dialog样式Activity外部对话框消失
  Activity 变成对话框，然后再隐藏？http://www.th7.cn/Program/Android/201311/158019.shtml
  [Android]对话框样式Activity获得窗口外点击事件  http://www.th7.cn/Program/Android/201311/159482.shtml



18. 图片处理框架
    Android 开源框架Universal-Image-Loader完全解析（一）--- 基本介绍及使用   http://www.cnblogs.com/jycboy/p/5620287.html


19.http://www.yiibai.com/javalang/class_getfield.html
  java.lang.Class.getField()返回一个Field对象，它反映此Class对象所表示的类或接口的指定公共成员字段。 name参数是一个字符串，用于指定所需的字段的简单名称。
  看了下面的例子自己是懂了，
   cls.getField("string1")
   public java.lang.String ClassDemo.string1
   getField返回的是 public java.lang.String ClassDemo公共的部分，后面是string1是加在后面的。

  JAVA反射中Field类的get方法说明记录 http://www.cnblogs.com/yhlx/articles/2617001.html
  Unsafe unsafe = (Unsafe)field.get(null);
 开始无法理解为什么传入null也能获取到Unsafe ..查了下才知道这个是获取static对象的..  


20. Google开源项目ZXing（二维条码编解码）简单使用    http://blog.csdn.net/benweizhu/article/details/7069403

21.BigDecimal类的加减乘除  http://blog.sina.com.cn/s/blog_6a0cd5e501011soa.html 
   public static double mul(double v1, double v2) {
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.multiply(b2).doubleValue();
    }


22. Android addTextChangedListener（文本监听）参数解释及实现EditText字数监听   http://www.cnblogs.com/zhujiabin/p/5917156.html
      也就是只要改变edittext或者重新复制覆盖之前的值就会执行这个监听的那三个方法。


23 TextView的字体颜色设置的多种方法 http://blog.csdn.net/a7a9a68/article/details/7778752

24 自己在自己的工程里面的类表里面直接添加字段，确实是可以添加，而且可以使用get方法。

25 消息模式Toast.makeText的几种常见用法  http://www.cnblogs.com/ycxyyzw/archive/2013/03/12/2955845.html (Toast的几种样式)

26 解析Token的方法
   //解析Token
    public AuthToken parseAccessToken(String accessToken){
        String token = EncryptUtil.base64DecodeToString(accessToken.getBytes());
        AuthToken authToken = null;
        try {
            authToken = JacksonUtils.json2pojo(token,AuthToken.class);
        } catch (Exception e) {
            logger.error("解析AccessToken失败",e);
        }

        return authToken;
    }
public static String base64DecodeToString(final byte[] bytes) {
            return new String(Base64.decodeBase64(bytes));
        }


String AuthTokenString = new String(Base64.decodeFast(RestConfig.getAuthToken()));
                    String storeId = null;
                    String messageStoreId = null;
                    try {
                        JSONObject AuthToken = new JSONObject(AuthTokenString);
                        storeId = AuthToken.getString("storeId");

                        JSONObject messageJS = new JSONObject(message);
                        messageStoreId = messageJS.getString("storeId");

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

27. Android studio如何更改gradle版本   Android studio如何更改gradle版本
    Android Gradle插件（plugin）版本（version）与Gradle、SDK Build Tools版本关系  http://blog.csdn.net/u012964796/article/details/51159554
    可以翻译看原文。

28  Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK fla
    http://www.th7.cn/Program/Android/201611/1012778.shtml
    http://blog.csdn.net/wike163/article/details/6678073
    

29. Java中的Timer和TimerTask在Android中的用法   http://blog.csdn.net/zuolongsnail/article/details/8168689
 
30.Android中inflate方法的用法 http://blog.sina.com.cn/s/blog_5da93c8f0100xm6n.html
   inflate(int resource, ViewGroup root)  把新生成的视图添加到根视图 root里面。

   2.关于LayoutInflater类inflate(int resource, ViewGroup root, boolean attachToRoot)方法三个参数的含义

  resource：需要加载布局文件的id，意思是需要将这个布局文件中加载到Activity中来操作。

  root：需要附加到resource资源文件的根控件，什么意思呢，就是inflate()会返回一个View对象，如果第三个参数attachToRoot为true，就将这个root作为根对象返回，
        否则仅仅将这个root对象的LayoutParams属性附加到resource对象的根布局对象上，也就是布局文件resource的最外层的View上，比如是一个LinearLayout或者其
        它的Layout对象。

  attachToRoot：是否将root附加到布局文件的根视图上


 convertView&setTag方法的一点理解     http://blog.163.com/freemanls%40126/blog/static/164585061201171210504864/
 通过这篇文章自己终于知道自己下单修改商品个数出现问题的原因了，因为每次都是复用，（自己理解是同一个对象），所以操作一个下面都改变。
 然后自己把convertView.setTag(viewsHolder);去掉，然后每次都new一个新的viewsHolder就解决问题了。

 ******也就是说这个是解决ListView里面嵌套EditText出现问题的方法。



 LayoutInflater.inflate方法解析 http://blog.csdn.net/u013474104/article/details/52702495

 LayoutInflater中四种类型inflate方法的介绍  http://www.cnblogs.com/top5/archive/2012/05/05/2484938.html 

 View视图框架源码分析之一:android是如何创建一个view http://blog.csdn.net/jj120522/article/details/8211600

  LayoutInflater.inflate方法解析  http://blog.csdn.net/u013474104/article/details/52702495

  Android中的inflate用法  http://blog.csdn.net/yinbucheng/article/details/51635363   （这个把那几个参数说的很详细）



31 Android Studio修改包名  http://blog.csdn.net/le_go/article/details/44342505

  他这个方法可以随便修改包名，如果不能修改报错，那先修改 zaozhuangbaixing（androidTest）这个名字，然后再修改我们需要修改的。

  
  比如我自己的目录结构:左上角最上面那个名字是整个工程的名字，这个名字自己随便起是和包名没有任何关系的，app目录就放在他下面。

  app的工程结构是是java目录下面体现出来的，是按照包名来的，比如 zaozhuangbaixing.com.(自己的java代码)，那工程目录就是 zaozhuangbaixing-->com-->自己写的java代码
  
  还有就是 zaozhuangbaixing-->com两个目录可以随便拖拽，com可以和 zaozhuangbaixing平级或者在他下面，自己随意修改。


32 *******这个挺重要的，自己把安卓中的Activity活动任务栈搞清楚就好了。
  Activity的四种启动模式和onNewIntent()    http://blog.csdn.net/linghu_java/article/details/17266603
  onNewIntent调用时机     http://www.cnblogs.com/zenfly/archive/2012/02/10/2345196.html
  Android解决方案】在onResume里调用getIntent()得到的是上一次数据   http://blog.csdn.net/xieyupeng520/article/details/49884573
33 ***真的好 史上最全webview详解  https://yq.aliyun.com/articles/32559

34 解决三星手机频繁调用接口失败问题 报错 ：
   
   05-19 10:25:51.889 17186-22398/com.ybzf.mobile.newpharmacist.debug D/Retrofit: java.io.EOFException
                                                                                   at libcore.io.Streams.readAsciiLine(Streams.java:203)
                                                                                   at libcore.net.http.HttpEngine.readResponseHeaders(HttpEngine.java:579)
                                                                                   at libcore.net.http.HttpEngine.readResponse(HttpEngine.java:827)
                                                                                   at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:283)
                                                                                   at libcore.net.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:497)
                                                                                   at retrofit.client.UrlConnectionClient.readResponse(UrlConnectionClient.java:73)
                                                                                   at retrofit.client.UrlConnectionClient.execute(UrlConnectionClient.java:38)
                                                                                   at retrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:326)
                                                                                   at retrofit.RestAdapter$RestHandler.invoke(RestAdapter.java:240)
                                                                                   at $Proxy1.login(Native Method)
                                                                                   at com.ybzf.mobile.newpharmacist.activity.LoginActivity$5.doInBackground(LoginActivity.java:207)
                                                                                   at com.ybzf.mobile.newpharmacist.activity.LoginActivity$5.doInBackground(LoginActivity.java:203)
                                                                                   at com.ybzf.mobile.commonutils.executor.Worker.run(Worker.java:35)
                                                                                   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)
                                                                                   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)
                                                                                   at java.lang.Thread.run(Thread.java:841)
 解决网址：
 http://stackoverflow.com/questions/22680533/java-io-eofexception-using-ksoap2-lib-libcore-io-streams-readasciilinestreams-j
 http://stackoverflow.com/questions/15411213/android-httpsurlconnection-eofexception

  
35 Android事件分发机制完全解析，带你从源码的角度彻底理解(上)  http://blog.csdn.net/guolin_blog/article/details/9097463  


36.Android获取经纬度、计算距离、方位角  http://www.cnblogs.com/ouling/archive/2011/08/26/2154555.html 

37. Android中的Selector的用法  http://blog.csdn.net/shakespeare001/article/details/7788400/

38.Intent传递数据 (得到返回数据)  http://blog.csdn.net/gwalking/article/details/49756193









 
                                  _oo0oo_
                                 088888880
                                 88" . "88
                                 (| -_- |)
                                  0\ = /0
                               ___/'---'\___
                             .' \\\\|     |// '.
                            / \\\\|||  :  |||// \\
                           /_ ||||| -:- |||||- \\
                          |   | \\\\\\  -  /// |   |
                          | \_|  ''\---/''  |_/ |
                          \  .-\__  '-'  __/-.  /
                        ___'. .'  /--.--\  '. .'___
                     ."" '<  '.___\_<|>_/___.' >'  "".
                    | | : '-  \'.;'\ _ /';.'/ - ' : | |
                    \  \ '_.   \_ __\ /__ _/   .-' /  /
                ====='-.____'.___ \_____/___.-'____.-'=====
                                  '=---='
 
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        佛祖保佑    iii    永不死机








